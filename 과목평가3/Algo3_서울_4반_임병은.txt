(1) 스택에 대해 간단히 설명하시오.

스택은 선형이다. 또한 스택은 후입선출의 특징이 있다. 즉 나중에 들어온 것이 먼저 나가는 방식이다.
접시르 쌓아놓은 것을 생각하면 이해하기 쉽다.
아래에서부터 쌓아올려진 접시들은 가장 마지막에 올려 둔 접시를 가장 먼저 빼서 사용하게 된다.
파이썬에서는 내장함수 append와 pop을 통해 간단히 스택을 구현해 사용할 수 있다.
이러한 스택의 특징은 다양한 알고리즘 풀이에서 유용하게 사용될 수 있다.


(2) Depth First Search(DFS) 에 대해 간단히 설명하시오.

DFS는 '깊이우선탐색'으로 탐색하는 방식을 나타내는 말이다.
노드(정점) 과 노드를 잇는 경로가 있을 때, 시작점에서 부터 깊이를 우선하여 탐색하는 방식이다.
즉 현재 정점에서 갈림길이 있는경우 한쪽을 선택해 들어가면
더이상 방문할 곳이 없을 때 까지 탐색하고,
현재 노드에서 방문할 곳이 없다면 가장 최근의 갈림길 노드로 돌아와 방문하지 않았던 곳을 찾아간다.
즉, 한 방향으로 최대 깊이 까지 탐색했다가 더이상 갈곳이 없으면 스택을 활용하여 최근 노드로 돌아가는
방식이다.

(3)

문제의 예시를 살펴보면 규칙을 알아 추론할 수 있다.
시작점에서 부터 DFS를 진행하는데 갈림길에서 방문하지 않은 곳이 2개 이상일 경우
그 중 작은 값의 노드부터 방문하는 규칙이다.
따라서 4번 정점에서 DFS를 시작한다면 방문순서는 아래와 같다.
4 2 1 3 7 6 5
갈림길에서 어떤 선택을 하는지 간단히 살펴보자
먼저 시작점 4번 정점에서는 2번과 6번으로 갈 수 있다.
이 때 더 작은값의 노드인 2번으로 이동한다.
2번에서도 마찬가지로 1 과 5 중 더 작은 1로 이동한다
1번에서는 방문하지 않은 곳은 3 밖에 없으므로 3으로 이동한다
3번에서도 방문하지 않은 곳은 7 밖에 없으므로 7로 이동한다.
7번에서도 방문하지 않은 곳은 6 밖에 없으므로 6으로 이동한다
6번에서도 방문하지 않은 곳은 5 밖에 없으므로 5로 이동한다.
5번에서는 더이상 방문하지 않은 곳이 없다.
따라서 다시 6 7 3 1 2 4 순으로 돌아가지만 모든 곳을 다 방문한 상태임으로 dfs는 완료된다.